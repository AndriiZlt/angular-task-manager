{"version":3,"sources":["webpack:///src/app/pages/login/login-routing.module.ts","webpack:///src/app/pages/login/login.component.ts","webpack:///src/app/pages/login/login.component.html","webpack:///src/app/pages/login/login.module.ts"],"names":["routes","path","component","LoginRoutingModule","forChild","imports","exports","LoginComponent","router","route","formBuilder","loginService","submitted","valid","inputType","isDisabled","registerForm","group","name","required","pattern","minLength","email","password","controls","invalid","console","log","JSON","stringify","value","capitalized","charAt","toUpperCase","slice","triggerEvent","login","localStorage","setItem","Date","now","toString","navigate","routeReuseStrategy","shouldReuseRoute","onSameUrlNavigation","relativeTo","onSubmit","onFormChange","passwordShowHide","selector","templateUrl","styleUrls","changeDetection","OnPush","LoginModule","declarations"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAIA,QAAMA,MAAM,GAAW,CAAC;AAAEC,UAAI,EAAE,EAAR;AAAYC,eAAS,EAAE;AAAvB,KAAD,CAAvB;;QAMaC,kB;;;;;YAAAA;;;;yBAAAA,kB;AAAkB,O;AAAA,gBAHpB,CAAC,6DAAaC,QAAb,CAAsBJ,MAAtB,CAAD,CAGoB,EAFnB,4DAEmB;;;;0HAAlBG,kB,EAAkB;AAAA;AAAA,kBAFnB,4DAEmB;AAAA,O;AAFP,K;;;;;sEAEXA,kB,EAAkB;cAJ9B,sDAI8B;eAJrB;AACRE,iBAAO,EAAE,CAAC,6DAAaD,QAAb,CAAsBJ,MAAtB,CAAD,CADD;AAERM,iBAAO,EAAE,CAAC,4DAAD;AAFD,S;AAIqB,Q;;;;;;;;;;;;;;;;;;ACV/B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACeU;;AAAoC;;AAAgB;;;;;;AACpD;;AACE;;AACF;;;;;;AAJF;;AACE;;AACA;;AAGF;;;;;;AAJO;;AAAA;;AACA;;AAAA;;;;;;AAiBL;;AAAqC;;AAAiB;;;;;;AACtD;;AAAkC;;AAA6B;;;;;;AAFjE;;AACE;;AACA;;AACF;;;;;;AAFO;;AAAA;;AACA;;AAAA;;;;;;AA8BL;;AAAwC;;AAAoB;;;;;;AAC5D;;AAME;;AAEF;;;;;;AAVF;;AACE;;AACA;;AASF;;;;;;AAVO;;AAAA;;AAEH;;AAAA;;;;;;;;;;QDpDCC,c;AAOX,8BACUC,MADV,EAEUC,KAFV,EAGUC,WAHV,EAIUC,YAJV,EAIoC;AAAA;;AAH1B,aAAAH,MAAA,GAAAA,MAAA;AACA,aAAAC,KAAA,GAAAA,KAAA;AACA,aAAAC,WAAA,GAAAA,WAAA;AACA,aAAAC,YAAA,GAAAA,YAAA;AATV,aAAAC,SAAA,GAAqB,KAArB;AACA,aAAAC,KAAA,GAAiB,KAAjB;AACA,aAAAC,SAAA,GAAoB,UAApB;AACA,aAAAC,UAAA,GAAsB,IAAtB;AAOI;;;;eAEJ,oBAAQ;AACN,eAAKC,YAAL,GAAoB,KAAKN,WAAL,CAAiBO,KAAjB,CAAuB;AACzCC,gBAAI,EAAE,CACJ,IADI,EAEJ,CACE,0DAAWC,QADb,EAEE,0DAAWC,OAAX,CAAmB,aAAnB,CAFF,EAGE,0DAAWC,SAAX,CAAqB,CAArB,CAHF,CAFI,CADmC;AASzCC,iBAAK,EAAE,CACL,IADK,EAEL,CACE,0DAAWH,QADb,EAEE,0DAAWG,KAFb,EAGE,0DAAWF,OAAX,CAAmB,+CAAnB,CAHF,CAFK,CATkC;AAiBzCG,oBAAQ,EAAE,CACR,IADQ,EAER,CACE,0DAAWJ,QADb,EAEE,0DAAWC,OAAX,CACE,gEADF,CAFF,EAKE,0DAAWC,SAAX,CAAqB,CAArB,CALF,CAFQ;AAjB+B,WAAvB,CAApB;AA4BD;;;aAED,eAAQ;AACN,iBAAO,KAAKL,YAAL,CAAkBQ,QAAzB;AACD;;;eAED,oBAAQ;AACN,eAAKZ,SAAL,GAAiB,IAAjB,CADM,CAGN;;AACA,cAAI,KAAKI,YAAL,CAAkBS,OAAtB,EAA+B;AAC7BC,mBAAO,CAACC,GAAR,CAAY,SAAZ;AACA;AACD;;AACD,eAAKd,KAAL,GAAa,IAAb;AACAa,iBAAO,CAACC,GAAR,CAAY,eAAeC,IAAI,CAACC,SAAL,CAAe,KAAKb,YAAL,CAAkBc,KAAjC,CAA3B;AACA,cAAIC,WAAW,GACb,KAAKf,YAAL,CAAkBc,KAAlB,CAAwBZ,IAAxB,CAA6Bc,MAA7B,CAAoC,CAApC,EAAuCC,WAAvC,KACA,KAAKjB,YAAL,CAAkBc,KAAlB,CAAwBZ,IAAxB,CAA6BgB,KAA7B,CAAmC,CAAnC,CAFF;AAGA,eAAKvB,YAAL,CAAkBwB,YAAlB,CAA+BJ,WAA/B;AACA,eAAKK,KAAL;AACD;;;eAED,wBAAY;AACV,cAAI,KAAKpB,YAAL,CAAkBS,OAAtB,EAA+B;AAC7BC,mBAAO,CAACC,GAAR,CAAY,SAAZ;AACA,iBAAKZ,UAAL,GAAkB,IAAlB;AACD,WAHD,MAGO;AACL,iBAAKA,UAAL,GAAkB,KAAlB;AACD;AACF;;;eAED,iBAAK;AACHsB,sBAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,GAAL,GAAWC,QAAX,EAA9B;AAEA,eAAKjC,MAAL,CAAYkC,QAAZ,CAAqB,CAAC,MAAD,CAArB;AACD;;;eAED,4BAAgB;AACd,cAAI,KAAK5B,SAAL,KAAmB,UAAvB,EAAmC;AACjC,iBAAKA,SAAL,GAAiB,MAAjB;AACD,WAFD,MAEO;AACL,iBAAKA,SAAL,GAAiB,UAAjB;AACD;AACF;;;eAED,qBAAS;AACP,eAAKN,MAAL,CAAYmC,kBAAZ,CAA+BC,gBAA/B,GAAkD;AAAA,mBAAM,KAAN;AAAA,WAAlD;;AACA,eAAKpC,MAAL,CAAYqC,mBAAZ,GAAkC,QAAlC;AACA,eAAKrC,MAAL,CAAYkC,QAAZ,CAAqB,CAAC,IAAD,CAArB,EAA6B;AAC3BI,sBAAU,EAAE,KAAKrC;AADU,WAA7B;AAGD;;;;;;;uBA/FUF,c,EAAc,uH,EAAA,+H,EAAA,2H,EAAA,4I;AAAA,K;;;YAAdA,c;AAAc,gC;AAAA,e;AAAA,c;AAAA,03C;AAAA;AAAA;ACd3B;;AACE;;AACE;;AAAiC;AAAA,mBAAY,IAAAwC,QAAA,EAAZ;AAAsB,WAAtB;;AAC/B;;AACE;;AAQE;AAAA,mBAAiB,IAAAC,YAAA,EAAjB;AAA+B,WAA/B;;AARF;;AAUA;;AAMF;;AAEA;;AACE;;AAOE;AAAA,mBAAiB,IAAAA,YAAA,EAAjB;AAA+B,WAA/B;;AAPF;;AASA;;AAIF;;AAEA;;AACE;;AAQE;AAAA,mBAAiB,IAAAA,YAAA,EAAjB;AAA+B,WAA/B;;AARF;;AAUA;;AAEE;AAAA,mBAAS,IAAAC,gBAAA,EAAT;AAA2B,WAA3B;;AAGA;;AAQF;;AACA;;AAYF;;AAEA;;AACE;;AAKE;;AAAM;;AAAK;;AACX;;AAAA;;AACE;;AAOA;;AAIF;;AACF;;AACF;;AACF;;AACF;;AACF;;;;AAnGU;;AAAA;;AAQA;;AAAA;;AAIG;;AAAA;;AAcH;;AAAA;;AAIG;;AAAA;;AAQH;;AAAA,0FAAkB,SAAlB,EAAkB,2GAAlB;;AAYA;;AAAA;;AAGE;;AAAA;;AAQiB;;AAAA;;AAkBnB;;AAAA;;AADA;;;;;;;;;;sEDlEG1C,c,EAAc;cAN1B,uDAM0B;eANhB;AACT2C,kBAAQ,EAAE,WADD;AAETC,qBAAW,EAAE,wBAFJ;AAGTC,mBAAS,EAAE,CAAC,wBAAD,CAHF;AAITC,yBAAe,EAAE,sEAAwBC;AAJhC,S;AAMgB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEd3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAUaC,W;;;;;YAAAA;;;;yBAAAA,W;AAAW,O;AAAA,gBAFb,CAAC,4DAAD,EAAe,wEAAf,EAAmC,0DAAnC,EAAgD,kEAAhD,CAEa;;;;0HAAXA,W,EAAW;AAAA,uBAHP,+DAGO;AAHO,kBACnB,4DADmB,EACL,wEADK,EACe,0DADf,EAC4B,kEAD5B;AAGP,O;AAFsD,K;;;;;sEAEjEA,W,EAAW;cAJvB,sDAIuB;eAJd;AACRC,sBAAY,EAAE,CAAC,+DAAD,CADN;AAERnD,iBAAO,EAAE,CAAC,4DAAD,EAAe,wEAAf,EAAmC,0DAAnC,EAAgD,kEAAhD;AAFD,S;AAIc,Q","file":"pages-login-login-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginComponent } from './login.component';\n\nconst routes: Routes = [{ path: '', component: LoginComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class LoginRoutingModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { LoginService } from 'src/app/services/login.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LoginComponent implements OnInit {\n  registerForm: FormGroup;\n  submitted: boolean = false;\n  valid: boolean = false;\n  inputType: string = 'password';\n  isDisabled: boolean = true;\n\n  constructor(\n    private router: Router,\n    private route: ActivatedRoute,\n    private formBuilder: FormBuilder,\n    private loginService: LoginService\n  ) {}\n\n  ngOnInit(): void {\n    this.registerForm = this.formBuilder.group({\n      name: [\n        null,\n        [\n          Validators.required,\n          Validators.pattern(/^[A-z0-9]*$/),\n          Validators.minLength(3),\n        ],\n      ],\n      email: [\n        null,\n        [\n          Validators.required,\n          Validators.email,\n          Validators.pattern(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/),\n        ],\n      ],\n      password: [\n        null,\n        [\n          Validators.required,\n          Validators.pattern(\n            /^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/\n          ),\n          Validators.minLength(8),\n        ],\n      ],\n    });\n  }\n\n  get f() {\n    return this.registerForm.controls;\n  }\n\n  onSubmit(): void {\n    this.submitted = true;\n\n    // stop here if form is invalid\n    if (this.registerForm.invalid) {\n      console.log('invalid');\n      return;\n    }\n    this.valid = true;\n    console.log('SUCCESS =>' + JSON.stringify(this.registerForm.value));\n    let capitalized =\n      this.registerForm.value.name.charAt(0).toUpperCase() +\n      this.registerForm.value.name.slice(1);\n    this.loginService.triggerEvent(capitalized);\n    this.login();\n  }\n\n  onFormChange(): void {\n    if (this.registerForm.invalid) {\n      console.log('invalid');\n      this.isDisabled = true;\n    } else {\n      this.isDisabled = false;\n    }\n  }\n\n  login(): void {\n    localStorage.setItem('token', Date.now().toString());\n\n    this.router.navigate(['home']);\n  }\n\n  passwordShowHide(): void {\n    if (this.inputType === 'password') {\n      this.inputType = 'text';\n    } else {\n      this.inputType = 'password';\n    }\n  }\n\n  resetPage(): void {\n    this.router.routeReuseStrategy.shouldReuseRoute = () => false;\n    this.router.onSameUrlNavigation = 'reload';\n    this.router.navigate(['./'], {\n      relativeTo: this.route,\n    });\n  }\n}\n","<div class=\"container\">\n  <div class=\"screen\">\n    <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\n      <div class=\"form-field\">\n        <input\n          type=\"text\"\n          placeholder=\"Name\"\n          required\n          formControlName=\"name\"\n          id=\"nameInput\"\n          [ngClass]=\"{ 'is-invalid': submitted && f.name.errors }\"\n          class=\"form-control\"\n          (ngModelChange)=\"onFormChange()\"\n        />\n        <div *ngIf=\"submitted && f.name.errors\" class=\"invalid-feedback\">\n          <div *ngIf=\"f.name.errors.required\">Name is required</div>\n          <div *ngIf=\"f.name.errors.minlength\">\n            Name must be at least 3 characters\n          </div>\n        </div>\n      </div>\n\n      <div class=\"form-field\">\n        <input\n          type=\"email\"\n          placeholder=\"Email\"\n          required\n          formControlName=\"email\"\n          [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\"\n          class=\"form-control\"\n          (ngModelChange)=\"onFormChange()\"\n        />\n        <div *ngIf=\"submitted && f.email.errors\" class=\"invalid-feedback\">\n          <div *ngIf=\"f.email.errors.required\">Email is required</div>\n          <div *ngIf=\"f.email.errors.email\">Must be a valid email address</div>\n        </div>\n      </div>\n\n      <div class=\"form-field\" id=\"passwordDiv\">\n        <input\n          [type]=\"inputType\"\n          placeholder=\"Password\"\n          id=\"password\"\n          required\n          formControlName=\"password\"\n          [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\"\n          class=\"form-control\"\n          (ngModelChange)=\"onFormChange()\"\n        />\n        <div\n          class=\"eye\"\n          (click)=\"passwordShowHide()\"\n          [style]=\"submitted && f.email.errors ? 'margin-right:20px' : ''\"\n        >\n          <img\n            [src]=\"\n              inputType === 'password'\n                ? '../../../assets/eye.svg'\n                : '../../../assets/eye-green.svg'\n            \"\n            alt=\"eye\"\n          />\n        </div>\n        <div class=\"invalid\" *ngIf=\"submitted && f.password.errors\">\n          <div *ngIf=\"f.password.errors.required\">Password is required</div>\n          <div\n            *ngIf=\"\n              (f.password.errors.pattern || !f.password.errors.minLength) &&\n              !f.password.errors.required\n            \"\n          >\n            At list 8 characters, 1 number and upper case letter, and 1 special\n            character\n          </div>\n        </div>\n      </div>\n\n      <div class=\"form-field\">\n        <button\n          class=\"loginBtn\"\n          [disabled]=\"isDisabled\"\n          [style]=\"isDisabled ? 'background-color:grey' : ''\"\n        >\n          <span>Login</span>\n          <svg width=\"34\" height=\"34\" viewBox=\"0 0 74 74\" fill=\"none\">\n            <circle\n              cx=\"37\"\n              cy=\"37\"\n              r=\"35.5\"\n              stroke=\"black\"\n              stroke-width=\"3\"\n            ></circle>\n            <path\n              d=\"M25 35.5C24.1716 35.5 23.5 36.1716 23.5 37C23.5 37.8284 24.1716 38.5 25 38.5V35.5ZM49.0607 38.0607C49.6464 37.4749 49.6464 36.5251 49.0607 35.9393L39.5147 26.3934C38.9289 25.8076 37.9792 25.8076 37.3934 26.3934C36.8076 26.9792 36.8076 27.9289 37.3934 28.5147L45.8787 37L37.3934 45.4853C36.8076 46.0711 36.8076 47.0208 37.3934 47.6066C37.9792 48.1924 38.9289 48.1924 39.5147 47.6066L49.0607 38.0607ZM25 38.5L48 38.5V35.5L25 35.5V38.5Z\"\n              fill=\"black\"\n            ></path>\n          </svg>\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { LoginRoutingModule } from './login-routing.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  declarations: [LoginComponent],\n  imports: [CommonModule, LoginRoutingModule, FormsModule, ReactiveFormsModule],\n})\nexport class LoginModule {}\n"]}